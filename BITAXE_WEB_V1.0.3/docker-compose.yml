version: '3.8'

services:
  # Main application
  bitaxe-web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bitaxe-web
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://bitaxe:${POSTGRES_PASSWORD:-bitaxe123}@postgres:5432/bitaxe
      - REDIS_URL=redis://redis:6379/0
      - OPENWEATHERMAP_API_KEY=${OPENWEATHERMAP_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key}
    volumes:
      - bitaxe_data:/app/data
      - bitaxe_models:/app/models
      - bitaxe_logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bitaxe-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: bitaxe-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=bitaxe
      - POSTGRES_USER=bitaxe
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bitaxe123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bitaxe -d bitaxe"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bitaxe-network

  # Redis cache and message broker
  redis:
    image: redis:7-alpine
    container_name: bitaxe-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - bitaxe-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bitaxe-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - bitaxe-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: bitaxe-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - bitaxe-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: bitaxe-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - bitaxe-network

# Volumes
volumes:
  bitaxe_data:
    driver: local
  bitaxe_models:
    driver: local
  bitaxe_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  bitaxe-network:
    driver: bridge